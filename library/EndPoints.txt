https://librarync1.fly.dev/api/v1

		User

POST	/authenticate/register
RegisterRequest
{
     String    id
	String    name
	String    lastName
	String    email
	String    password
	String    passwordRepeat
}
RegisterResponse
{
String 	name;
String	lastName;
String 	email;
String 	role;
List<?> 	list;
String 	jwt;
}
201 CREATED



POST	/authenticate/login
LoginRequest
{
String	email;
String 	password;
}
LoginResponse
{
String	 jwt;
}
200 OK



GET	/authenticate/profile



GET	/user/{email}
Response: 
UserDto
{
String 	name;
String    lastName;
String 	email;
}
200 OK



DELETE	/user/{email}
200 OK



DELETE	/user/unsubscribe/{email}
200 OK


		    Book

GET	/book/{id} 
ID del libro en la URL
BookResponse
200 OK



GET	/book/allBooks?page=0&size=5
Response:
	PaginatedBookResponseDTO<BookResponse>
200 OK



GET	/book/toCard/{id}
BookCardResponse
{
String 	title;
Double 	price;
String 	author;
String	initialImage;
}
200 OK



GET	/book/toCard/allBooks?page=0&size=5
PaginatedBookResponseDTO<BookCardResponse>
200 OK



GET	/book/toCardDescription/{id}
Response:
BookCardDescription
{
String 	title;
Double 	price;
String 	author;
String	initialImage;
String	description;
}
200 OK



GET	/book/toCardDescription/allBooks?page=0&size=5
Response: 
PaginatedBookResponseDTO<BookCardDescription>
200 OK




GET	/book/searchByCriteria?page={page}&size={size}&minPrice={minPrice}&maxPrice={maxPrice}&minPages={minPages}&genre={List-genre}&language={List-language}&searchText={textoABuscar}&searchEvenNotAvailable={searchEvenNotAvailable}&orderBy={}&ascOrDesc={}
donde: {searchEvenNotAvailable} va a ser 0 si el usuario quiere mostrar los libros sin stock
        La lista de genres y languages se detallan en el endpoint separados por ,
Ordenamiento: 
	orderBy={Tipo de ordenamiento} 
	ascOrDesc={Orden ascendente o descendente} -> asc / desc

Tipos de ordenamiento: (price;
			publicationDate;
			salesAmount; (tendencia)
			rating; <- todavia no hay votacion cargada asiq no anda
			alphabetically;)
Response:
PaginatedBookResponseDTO<BookToSearch>
200 OK




GET 	/book/searchGenre/{genre}?page=0&size=5
Response:
	PaginatedBookResponseDTO<BookToSearch>
200 OK




GET 	/book/searchTitle/{title}?page=0&size=5
Response:
	PaginatedBookResponseDTO<BookToSearch>
200 OK




GET 	/book/searchLatestAdded?page=0&size=5
Response:
	PaginatedBookResponseDTO<BookToSearch>
200 OK




GET 	/book/searchHighestRating?page=0&size=5
Response:
	PaginatedBookResponseDTO<BookToSearch>
200 OK




POST	/book/createBook
Request:
  BookRequest
Response:
	BookResponse 
201 CREATED




POST	/book/addImage/{id}
Request:
  String image;
201 CREATED




PATCH   /book/updateBook
Request:
    BookRequest
Response:
	BookResponse
201 CREATED




DELETE	/book/{id}
200 OK



BookRequest
{
    String 	idBook;
    String 	ISBN;
    String 	title;
    Double 	price;
    Integer 	pages;
    LocalDate 	publicationDate;
    Integer 	quantityAvailable;
    String 	description;
    String 	collection;
    String 	genre;
    String	language;
    String 	idAuthor;
    String 	idEditorial;
    String 	initialImage;
}

BookResponse
{
    String	idBook;
    String 	ISBN;
    String 	title;
    Double	price;
    Integer 	pages;
    LocalDate 	publicationDate;
    Integer 	quantityAvailable;
    Integer 	salesAmount;
    Integer 	rating;
    String 	description;
    String 	collection;
    String	genre;
    String	language;
    String 	completeNameAuthor;
    String 	nameEditorial;
    List<String> 	urlImages;
}

PaginatedBookResponseDTO<T>
{
   "content": [
	{ AnyBook },
	{ AnyBook },
	{ AnyBook }
    ],
    "totalPages": 4,
    "totalElements": 12,
    "isLast": false
}

BookToSearch
{
    String 	ID;
    String 	author;
    String 	name;
    Double 	price;
    String 	image;
    String 	description;
}



		Editorial


GET	/editorial/{id}
Response:
EditorialDto
200 OK



POST	/editorial/createEditorial
Request:
EditorialDto
Response:
EditorialDto
201 CREATED



DELETE	/editorial/{id}
200 OK




